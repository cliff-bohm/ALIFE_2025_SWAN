% BRAIN
  brainType = Chris                          #(string) brain to be used, [Chris]

% BRAIN_CHRIS
  cTagExponent = 1.0                         #(double) connect if ((1-distance) ^ distanceExponent) * (cMatch ^ tagExponent) > wireConnectionThreshold
  distanceExponent = 2.0                     #(double) connect if ((1-distance) ^ distanceExponent) * (cMatch ^ tagExponent) > wireConnectionThreshold
                                             #    if -1, then distance will not effect connection
  initalNeuronCount = 20                     #(int) number of neurons to initalize the brain with
  internalUpates = 1                         #(int) number of times each neuron fires per update
  outputRule = 1                             #(int) if internalUpates > 1, how is output determined?
                                             #  1: average of output over all steps
                                             #  2: final update value
  recordActivity = 0#1                         #(bool) if true, activity will be recorded to FireReport.txt
  wireConnectionThreshold = 0.5              #(double) connect if ((1-distance) ^ distanceExponent) * (cMatch ^ tagExponent) > wireConnectionThreshold

% BRAIN_CHRIS_BRANCH_TUNING_MUTATIONS
  mutateTuningPoint = 0.1                    #(double) per branch rate to mutate one tuning curve point

% BRAIN_CHRIS_MUTATIONS
  maxNeurons = 8                             #(int) mutations will not result in more then this many neurons
  minNeurons = 2                             #(int) mutations will not result in fewer then this many neurons
  mutateBranchCTagOnce = 0.005               #(double) per neuron chance to flip a single bit on the cTag of one of that neurons branches
  mutateBranchCTagRandom = 0.0002            #(double) per neuron chance to mutate the cTag of one of that neurons branches to a random value
  mutateBranchWTagOnce = 0.005               #(double) per neuron chance to flip a single bit on the wTag of one of that neurons branches
  mutateBranchWTagRandom = 0.0002            #(double) per neuron chance to mutate the wTag of one of that neurons branches to a random value
  mutateCopyNeuron = 0.005                   #(double) per brain chance to add a copy of an existing neuron
  mutateDeleteNeuron = 0.01                  #(double) per brain chance to delete a neuron
  mutateDistance = 0.025                     #(double) when a mutation causes a location change, what is the max range (-1 * mutateDistance -> mutateDistance)
  mutateNeuronCTagOnce = 0.005               #(double) per brain chance to mutate a single bit on a neurons cTag
  mutateNeuronCTagRandom = 0.0002            #(double) per brain chance to mutate a neurons cTag to a random value
  mutateNeuronLocation = 0.025               #(double) per brain chance to mutate a neurons location
  mutateNeuronWTagOnce = 0.005               #(double) per brain chance to mutate a single bit on a neurons wTag
  mutateNeuronWTagRandom = 0.0002            #(double) per brain chance to mutate a neurons wTag to a random value
  mutateNewNeuronPL = 0.005                  #(double) per brain chance to add a random new neuron
  mutateOutputLocation = 0.1                 #(double) per brain chance to mutate an output location

% BRAIN_CHRIS_SPIKEY_MUTATIONS
  mutateDecayRate = 0.025                    #(double) per neuron logic gate chance to mutate the Decay Rate
  mutateDefaultFire = 0.0                    #(double) per neuron logic gate chance to flip the activation behavior
  mutateDeliveryCharge = 0.025               #(double) per neuron logic gate chance to mutate the Delivery Charge
  mutateInitalCharge = 0.025                 #(double) per neuron logic gate chance to mutate the Inital Charge
  mutateMaxCharge = 0.0                      #(double) per neuron logic gate chance to mutate the max Charge
  mutateMinCharge = 0.0                      #(double) per neuron logic gate chance to mutate the min Charge
  mutateThreshold = 0.025                    #(double) per neuron logic gate chance to mutate the Threshold

% GENOME
  alphabetSize = 256.0                       #(double) alphabet size for genome
  genomeType = Circular                      #(string) genome to be used, [Circular]
  sitesType = char                           #(string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationIndelCopyFirst = 1                 #(bool) whether copy or deletion happens first (0 = delete first, 1 = copy first)
  mutationIndelInsertMethod = 0              #(int) where is copied material inserted?
                                             #  0 = place random, 1 = replace deleted sites, 2 = insert just before copied material
  mutationIndelMaxSize = 512                 #(int) maximum size of insertion-deletion mutation
  mutationIndelMinSize = 128                 #(int) minimum size of insertion-deletion mutation
  mutationIndelRate = 0.0                    #(double) per site insertion+deletion (indel) rate. This mutation copies a segment of the genome and deletes a segment
                                             #  of the same size so genome size remains fixed).
  mutationPointOffsetRange = 1.0             #(double) range of PointOffset mutation
  mutationPointOffsetRate = 0.0              #(double) per site point offset mutation rate (site changes in range (+/-)mutationPointOffsetRange)
  mutationPointOffsetUniform = 1             #(bool) if true, offset will be from a uniform distribution, if false, from a normal distribution (where mean is 0
                                             #  and std_dev is mutationPointOffsetRange)
  mutationPointRate = 0.005                  #(double) per site point mutation rate
  sizeInitial = 5000                         #(int) starting size for genome
  sizeMax = 20000                            #(int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             #(int) if genome is smaller then this, mutations will only increase chromosome size

